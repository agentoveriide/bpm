#!/usr/bin/env bash
# Includes a library that was installed via `bpm install`.
#
# $1 - Name of library to include.
#
# Starting at the current script's folder, this scans all parent folders
# for a `bpm` directory that contains the include file for the
# library. If that fails to find a hit, then the user's installed libraries
# and system installed libraries are checked.
#
# Returns true (0) if the library loaded successfully. Returns 1 when unable
# to locate the library or when the library doesn't `source` without errors.
# Returns 2 if no module name is specified.
bpm::include() {
    local cachedVarName dir oldPwd

    if [[ -z "${1-}" ]]; then
        echo "No module name specified." >&2

        return 2
    fi

    cachedVarName="bpm_include_$1"
    cachedVarName=${cachedVarName//-/_}

    if [[ -n "${!cachedVarName-}" ]]; then
        # Already loaded
        return 0
    fi

    # This next block is equivalent to shelling out to call `dirname`, but
    # is roughly twice as fast. It changes things like "file" into ".", but
    # anything with paths ("./file", "../file", "/dir/file") have the last
    # slash removed as well as everything afterwards.
    #
    # Do not use path::dirname because that library hasn't been loaded yet.
    dir=${BASH_SOURCE[1]}

    if [[ "$dir" == */* ]]; then
        dir=${dir%/*}
    else
        dir=.
    fi

    # Resolve ".." and similar things into a full path. Much faster than
    # the alternative: `dir="$(cd "$dir"; pwd)"`
    # Please pay special attention to the extra slash at the end of $dir.
    oldPwd=$PWD
    cd "$dir"
    dir="$PWD/"
    cd "$oldPwd"

    # Scan every folder and their parents until we're at the root.
    # This loop is a bit weird because we started with an extra slash added
    # to $dir. That lets us remove the last element from $dir with each loop
    # and still scan the root directory when we run out of other parents.
    while [[ -n "$dir" ]]; do
        dir=${dir%/*}

        bpm::includeAttempt "$cachedVarName" "$dir/bpm-modules/.include/$1" && return 0
    done

    # Check in a user's module folder.
    bpm::includeAttempt "$cachedVarName" ~/.bpm/.include/"$1" && return 0

    # Check for a library on the system.
    # Could use ${BASH_SOURCE[0]} for the location of bpm if we want to use
    # a relative path.
    bpm::includeAttempt "$cachedVarName" "$BPM_GLOBAL_PATH/.include/$1" && return 0

    echo "BPM include not found: $1" >&2

    return 1
}
