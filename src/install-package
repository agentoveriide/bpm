#!/usr/bin/env bash
# Installs a package or set of packages.
#
# $1 - Library directory for installation.
# $2 - Bin directory for installation.
# $3 - Package name.
# $4 - Package version specifier.
#
# Packages are checked for executable programs and file includes when being
# installed. The executables are placed in `$BIN_DIR` and the includes go
# into `$PREFIX/.include`.
#
# * When installing globally, `$PREFIX` is `/usr/lib/bpm/` and `$BIN_DIR` is
#   `/usr/bin/`.
# * If there is a `bpm.ini` file in the current directory or any parent, the
#   `$PREFIX` is set to the dirname of the file with "bpm/" appended. For
#   example, when `/home/user/project/bpm.ini` is detected, `$PREFIX` is
#   `/home/user/project/bpm/`. `$BIN_DIR` is `$PREFIX/.bin`.
# * Finally, when all else fails, use `~/.bpm/` as `$PREFIX` and `$BIN_DIR`
#   is `$PREFIX/.bin`.
#
# The package will be installed to `$PREFIX/$LIBRARY/`. After installation, the
# `bpm.ini` package descriptor is scanned and the following actions will be
# taken.
#
# * All packages under the `[dependencies]` section are installed to
#   `$PREFIX/`. This installation logic is repeated for each of them.
# * The `[package]` section is checked for an `include` key. If found, a file
#   is written to `$PREFIX/.include/$LIBRARY` that will load the necessary
#   files in the library.
# * If there is a `[install]` section, all of the keys will generate
#   executable wrapper scripts. The wrappers will be created as
#   `$BIN_DIR/$COMMAND_NAME`.
#
# This returns true (0) on success. Returns 1 if there is any issue downloading
# the package.
bpm::installPackage() {
    local dependencies package packagePrefix version

    # See if it is already installed.
    if [[ -d "$1/$3" ]]; then
        log::debug "Package already installed: $3"

        return 0
    fi

    echo "Installing $3"

    if ! bpm::downloadPackage "$1" "$3" "$4"; then
        log::debug "Error downloading package. Removing any temporary directory."
        rm -rf "${1:?}/$2"

        return 1
    fi

    # Parse the INI
    ini::prefix packagePrefix

    if [[ -f "$1/$3/bpm.ini" ]]; then
        log::debug "Loading package INI."
        ini::parse "$packagePrefix" "$(cat "$1/$3/bpm.ini")"
    else
        log::debug "No package INI file. Faking an empty config."
    fi

    # Install
    bpm::linkIncludeFile "$1" "$3" "$packagePrefix"
    bpm::linkPrograms "$1" "$2" "$3" "$packagePrefix"

    # Install any dependencies
    ini::get dependencies "$packagePrefix" dependencies

    if [[ "${#dependencies[@]}" ]]; then
        for package in "${dependencies[@]}"; do
            ini::get version "$packagePrefix" dependencies "$package"
            bpm::installPackage "$1" "$2" "$package" "$version"
        done
    fi
}
